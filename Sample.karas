= Sand Box

=================================================

== Inline markups :: idoption

** bold ** & *** strong ***

//italic// & ///emphasize///

%% strike %% & %%% delete %%%

__underline__ & ____insert___

''super'' & '''RU::ru::BY::by'''

,,sub,,

``var`` & ```code```

$$ kbd $$ & $$$ samp $$$

""quote""

@@ cite @@ & @@@ small @@@

?? dfn ?? & ??? dfn-abbr ???

=================================================

== Link :: link

((Link)) is quite simple. 
You can use alias text like ((URL :: this)).

=================================================

== Media :: media

Media syntax filters the extension, and outputs relevant HTML5 tag (with object/embed tags).
Nothing is appears when the file or plugins is not found. 

(((test.mp4)))
(((test.mp3 :: controls)))
(((test.jpg :: width=100 height= 80)))

=================================================

== Group :: group

=== Block group

You can group some contents and named it.
Basically, it becomes //div// and the class name.

{{groupname

Following contents are grouped.
- list
+ list

(((test.jpg::width=100 height=100)))

}}



You can use some special group. //section// is one of it.

{{section
This grouped contents becomes section contents.
}}


Especialy //pre//, //kbd//, //samp//, //code// group's contents become a preformatted text, ~
and syntaxs are not converted.

{{kbd
$ console-like kbd area with css.
$ echo Unyalder!
Unyalder!
}}


If you want to name the special class, like this.

{{code :: javascript
int index = 0;
<html>code</html>
**bold**
}}


Heading syntax in //figure// group becomes //figcaption//.

{{figure

(((figure.jpg)))
= figcaption.

}}

{{figure

= Blockgroup in Blockgroup sample.c

{{code
    #include <stdio.h>
    int main()
    {
        print("Unyalder!");
        return 0;
    }
}}

}}



=== Inline group

This is level 1 <<classname :: inline group>>, output as //span class//.
This is level 2 <<<idname :: inline group>>>, output as //span id//.

Inline group has no special name like a //Block group//. 

=================================================

== Table :: table

!| Header  !| Header !< Left
|| Default |= Center |> Right
|| Rowspan || ::     || Colspan
|| Cell    || Cell   || :::

{{figure
= Tablecaption

!| ## none ## !|Header !|Header
|| Value-A    |> 0 |> 0 
|| Value-B    |> 0 |> 0
}}

=================================================

== List::list

+ Ordered list.
+ 2nd ordered list.
++ Nested ordered list
++ Ordered list with option :: 5
++ This list number becomes the next of the previous option.

- Unodererd list
++ Ordered list combination
++ Ordered list 2

; Definition list - Term
;; Definition list - description 1
;; Definition list - description 2

=================================================

== Blockquote :: blockquote

> Blockquote text.
> You can use //KARAS// sytanx in blockquote.
>> Nested blockquote.
> - list in blockquote.

=================================================

== Others :: others

If you want to get all of the syntax or more details, visit ((http://www.lightweightmarkuplanguage.com))


=== Comment out :: commentout

Comment out text is HERE! -> ## this text doesnt appeare. ##


=== Escape

If you want to disable the syntax, use //backslash(\\)// mark. \*\*This is escape sample\*\*.


=== Line break

Line break is like~
this.

=== HTML tag

You can use HTML element in KARAS <b>like this</b>.

=================================================

== Plugin::plugin

You can use and develop plugin. //Table Of Contents(TOC)// is one of action-type plugin sample.

[[[toc]]]

If you want to use markedup text in plugin, use convert-type.

[[mark::markedup text]]

You can use option parameter like this. 

[[mark::red::markedup text]]